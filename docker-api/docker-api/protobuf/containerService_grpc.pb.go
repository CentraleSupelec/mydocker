// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: containerService.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContainerService_GetContainer_FullMethodName       = "/fr.centralesupelec.gRPC.containerService/getContainer"
	ContainerService_SaveData_FullMethodName           = "/fr.centralesupelec.gRPC.containerService/saveData"
	ContainerService_GetAdminContainer_FullMethodName  = "/fr.centralesupelec.gRPC.containerService/getAdminContainer"
	ContainerService_BuildDockerImage_FullMethodName   = "/fr.centralesupelec.gRPC.containerService/buildDockerImage"
	ContainerService_DeployInfra_FullMethodName        = "/fr.centralesupelec.gRPC.containerService/deployInfra"
	ContainerService_GetLogs_FullMethodName            = "/fr.centralesupelec.gRPC.containerService/getLogs"
	ContainerService_ShutdownContainer_FullMethodName  = "/fr.centralesupelec.gRPC.containerService/shutdownContainer"
	ContainerService_DelayDeletion_FullMethodName      = "/fr.centralesupelec.gRPC.containerService/delayDeletion"
	ContainerService_InitAutoscaling_FullMethodName    = "/fr.centralesupelec.gRPC.containerService/initAutoscaling"
	ContainerService_GetNodeIP_FullMethodName          = "/fr.centralesupelec.gRPC.containerService/getNodeIP"
	ContainerService_GetContainerStatus_FullMethodName = "/fr.centralesupelec.gRPC.containerService/getContainerStatus"
)

// ContainerServiceClient is the client API for ContainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerServiceClient interface {
	GetContainer(ctx context.Context, opts ...grpc.CallOption) (ContainerService_GetContainerClient, error)
	SaveData(ctx context.Context, opts ...grpc.CallOption) (ContainerService_SaveDataClient, error)
	GetAdminContainer(ctx context.Context, opts ...grpc.CallOption) (ContainerService_GetAdminContainerClient, error)
	BuildDockerImage(ctx context.Context, opts ...grpc.CallOption) (ContainerService_BuildDockerImageClient, error)
	DeployInfra(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (ContainerService_DeployInfraClient, error)
	GetLogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	ShutdownContainer(ctx context.Context, opts ...grpc.CallOption) (ContainerService_ShutdownContainerClient, error)
	DelayDeletion(ctx context.Context, in *DelayDeletionRequest, opts ...grpc.CallOption) (*DelayDeletionResponse, error)
	InitAutoscaling(ctx context.Context, in *InitAutoscalingRequest, opts ...grpc.CallOption) (*InitAutoscalingResponse, error)
	GetNodeIP(ctx context.Context, in *NodeIPRequest, opts ...grpc.CallOption) (*NodeIPResponse, error)
	GetContainerStatus(ctx context.Context, opts ...grpc.CallOption) (ContainerService_GetContainerStatusClient, error)
}

type containerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerServiceClient(cc grpc.ClientConnInterface) ContainerServiceClient {
	return &containerServiceClient{cc}
}

func (c *containerServiceClient) GetContainer(ctx context.Context, opts ...grpc.CallOption) (ContainerService_GetContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[0], ContainerService_GetContainer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &containerServiceGetContainerClient{stream}
	return x, nil
}

type ContainerService_GetContainerClient interface {
	Send(*ContainerRequest) error
	Recv() (*ContainerResponse, error)
	grpc.ClientStream
}

type containerServiceGetContainerClient struct {
	grpc.ClientStream
}

func (x *containerServiceGetContainerClient) Send(m *ContainerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containerServiceGetContainerClient) Recv() (*ContainerResponse, error) {
	m := new(ContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerServiceClient) SaveData(ctx context.Context, opts ...grpc.CallOption) (ContainerService_SaveDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[1], ContainerService_SaveData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &containerServiceSaveDataClient{stream}
	return x, nil
}

type ContainerService_SaveDataClient interface {
	Send(*SaveDataRequest) error
	Recv() (*SaveDataResponse, error)
	grpc.ClientStream
}

type containerServiceSaveDataClient struct {
	grpc.ClientStream
}

func (x *containerServiceSaveDataClient) Send(m *SaveDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containerServiceSaveDataClient) Recv() (*SaveDataResponse, error) {
	m := new(SaveDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerServiceClient) GetAdminContainer(ctx context.Context, opts ...grpc.CallOption) (ContainerService_GetAdminContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[2], ContainerService_GetAdminContainer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &containerServiceGetAdminContainerClient{stream}
	return x, nil
}

type ContainerService_GetAdminContainerClient interface {
	Send(*AdminContainerRequest) error
	Recv() (*AdminContainerResponse, error)
	grpc.ClientStream
}

type containerServiceGetAdminContainerClient struct {
	grpc.ClientStream
}

func (x *containerServiceGetAdminContainerClient) Send(m *AdminContainerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containerServiceGetAdminContainerClient) Recv() (*AdminContainerResponse, error) {
	m := new(AdminContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerServiceClient) BuildDockerImage(ctx context.Context, opts ...grpc.CallOption) (ContainerService_BuildDockerImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[3], ContainerService_BuildDockerImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &containerServiceBuildDockerImageClient{stream}
	return x, nil
}

type ContainerService_BuildDockerImageClient interface {
	Send(*DockerImageRequest) error
	Recv() (*DockerImageResponse, error)
	grpc.ClientStream
}

type containerServiceBuildDockerImageClient struct {
	grpc.ClientStream
}

func (x *containerServiceBuildDockerImageClient) Send(m *DockerImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containerServiceBuildDockerImageClient) Recv() (*DockerImageResponse, error) {
	m := new(DockerImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerServiceClient) DeployInfra(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (ContainerService_DeployInfraClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[4], ContainerService_DeployInfra_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &containerServiceDeployInfraClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContainerService_DeployInfraClient interface {
	Recv() (*DeployResponse, error)
	grpc.ClientStream
}

type containerServiceDeployInfraClient struct {
	grpc.ClientStream
}

func (x *containerServiceDeployInfraClient) Recv() (*DeployResponse, error) {
	m := new(DeployResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerServiceClient) GetLogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, ContainerService_GetLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) ShutdownContainer(ctx context.Context, opts ...grpc.CallOption) (ContainerService_ShutdownContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[5], ContainerService_ShutdownContainer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &containerServiceShutdownContainerClient{stream}
	return x, nil
}

type ContainerService_ShutdownContainerClient interface {
	Send(*ShutdownContainerRequest) error
	Recv() (*ShutdownContainerResponse, error)
	grpc.ClientStream
}

type containerServiceShutdownContainerClient struct {
	grpc.ClientStream
}

func (x *containerServiceShutdownContainerClient) Send(m *ShutdownContainerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containerServiceShutdownContainerClient) Recv() (*ShutdownContainerResponse, error) {
	m := new(ShutdownContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerServiceClient) DelayDeletion(ctx context.Context, in *DelayDeletionRequest, opts ...grpc.CallOption) (*DelayDeletionResponse, error) {
	out := new(DelayDeletionResponse)
	err := c.cc.Invoke(ctx, ContainerService_DelayDeletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) InitAutoscaling(ctx context.Context, in *InitAutoscalingRequest, opts ...grpc.CallOption) (*InitAutoscalingResponse, error) {
	out := new(InitAutoscalingResponse)
	err := c.cc.Invoke(ctx, ContainerService_InitAutoscaling_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) GetNodeIP(ctx context.Context, in *NodeIPRequest, opts ...grpc.CallOption) (*NodeIPResponse, error) {
	out := new(NodeIPResponse)
	err := c.cc.Invoke(ctx, ContainerService_GetNodeIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) GetContainerStatus(ctx context.Context, opts ...grpc.CallOption) (ContainerService_GetContainerStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[6], ContainerService_GetContainerStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &containerServiceGetContainerStatusClient{stream}
	return x, nil
}

type ContainerService_GetContainerStatusClient interface {
	Send(*ContainerStatusRequest) error
	Recv() (*ContainerStatusResponse, error)
	grpc.ClientStream
}

type containerServiceGetContainerStatusClient struct {
	grpc.ClientStream
}

func (x *containerServiceGetContainerStatusClient) Send(m *ContainerStatusRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containerServiceGetContainerStatusClient) Recv() (*ContainerStatusResponse, error) {
	m := new(ContainerStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContainerServiceServer is the server API for ContainerService service.
// All implementations must embed UnimplementedContainerServiceServer
// for forward compatibility
type ContainerServiceServer interface {
	GetContainer(ContainerService_GetContainerServer) error
	SaveData(ContainerService_SaveDataServer) error
	GetAdminContainer(ContainerService_GetAdminContainerServer) error
	BuildDockerImage(ContainerService_BuildDockerImageServer) error
	DeployInfra(*DeployRequest, ContainerService_DeployInfraServer) error
	GetLogs(context.Context, *LogRequest) (*LogResponse, error)
	ShutdownContainer(ContainerService_ShutdownContainerServer) error
	DelayDeletion(context.Context, *DelayDeletionRequest) (*DelayDeletionResponse, error)
	InitAutoscaling(context.Context, *InitAutoscalingRequest) (*InitAutoscalingResponse, error)
	GetNodeIP(context.Context, *NodeIPRequest) (*NodeIPResponse, error)
	GetContainerStatus(ContainerService_GetContainerStatusServer) error
	mustEmbedUnimplementedContainerServiceServer()
}

// UnimplementedContainerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContainerServiceServer struct {
}

func (UnimplementedContainerServiceServer) GetContainer(ContainerService_GetContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method GetContainer not implemented")
}
func (UnimplementedContainerServiceServer) SaveData(ContainerService_SaveDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveData not implemented")
}
func (UnimplementedContainerServiceServer) GetAdminContainer(ContainerService_GetAdminContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAdminContainer not implemented")
}
func (UnimplementedContainerServiceServer) BuildDockerImage(ContainerService_BuildDockerImageServer) error {
	return status.Errorf(codes.Unimplemented, "method BuildDockerImage not implemented")
}
func (UnimplementedContainerServiceServer) DeployInfra(*DeployRequest, ContainerService_DeployInfraServer) error {
	return status.Errorf(codes.Unimplemented, "method DeployInfra not implemented")
}
func (UnimplementedContainerServiceServer) GetLogs(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedContainerServiceServer) ShutdownContainer(ContainerService_ShutdownContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method ShutdownContainer not implemented")
}
func (UnimplementedContainerServiceServer) DelayDeletion(context.Context, *DelayDeletionRequest) (*DelayDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelayDeletion not implemented")
}
func (UnimplementedContainerServiceServer) InitAutoscaling(context.Context, *InitAutoscalingRequest) (*InitAutoscalingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitAutoscaling not implemented")
}
func (UnimplementedContainerServiceServer) GetNodeIP(context.Context, *NodeIPRequest) (*NodeIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeIP not implemented")
}
func (UnimplementedContainerServiceServer) GetContainerStatus(ContainerService_GetContainerStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetContainerStatus not implemented")
}
func (UnimplementedContainerServiceServer) mustEmbedUnimplementedContainerServiceServer() {}

// UnsafeContainerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerServiceServer will
// result in compilation errors.
type UnsafeContainerServiceServer interface {
	mustEmbedUnimplementedContainerServiceServer()
}

func RegisterContainerServiceServer(s grpc.ServiceRegistrar, srv ContainerServiceServer) {
	s.RegisterService(&ContainerService_ServiceDesc, srv)
}

func _ContainerService_GetContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceServer).GetContainer(&containerServiceGetContainerServer{stream})
}

type ContainerService_GetContainerServer interface {
	Send(*ContainerResponse) error
	Recv() (*ContainerRequest, error)
	grpc.ServerStream
}

type containerServiceGetContainerServer struct {
	grpc.ServerStream
}

func (x *containerServiceGetContainerServer) Send(m *ContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containerServiceGetContainerServer) Recv() (*ContainerRequest, error) {
	m := new(ContainerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContainerService_SaveData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceServer).SaveData(&containerServiceSaveDataServer{stream})
}

type ContainerService_SaveDataServer interface {
	Send(*SaveDataResponse) error
	Recv() (*SaveDataRequest, error)
	grpc.ServerStream
}

type containerServiceSaveDataServer struct {
	grpc.ServerStream
}

func (x *containerServiceSaveDataServer) Send(m *SaveDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containerServiceSaveDataServer) Recv() (*SaveDataRequest, error) {
	m := new(SaveDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContainerService_GetAdminContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceServer).GetAdminContainer(&containerServiceGetAdminContainerServer{stream})
}

type ContainerService_GetAdminContainerServer interface {
	Send(*AdminContainerResponse) error
	Recv() (*AdminContainerRequest, error)
	grpc.ServerStream
}

type containerServiceGetAdminContainerServer struct {
	grpc.ServerStream
}

func (x *containerServiceGetAdminContainerServer) Send(m *AdminContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containerServiceGetAdminContainerServer) Recv() (*AdminContainerRequest, error) {
	m := new(AdminContainerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContainerService_BuildDockerImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceServer).BuildDockerImage(&containerServiceBuildDockerImageServer{stream})
}

type ContainerService_BuildDockerImageServer interface {
	Send(*DockerImageResponse) error
	Recv() (*DockerImageRequest, error)
	grpc.ServerStream
}

type containerServiceBuildDockerImageServer struct {
	grpc.ServerStream
}

func (x *containerServiceBuildDockerImageServer) Send(m *DockerImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containerServiceBuildDockerImageServer) Recv() (*DockerImageRequest, error) {
	m := new(DockerImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContainerService_DeployInfra_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceServer).DeployInfra(m, &containerServiceDeployInfraServer{stream})
}

type ContainerService_DeployInfraServer interface {
	Send(*DeployResponse) error
	grpc.ServerStream
}

type containerServiceDeployInfraServer struct {
	grpc.ServerStream
}

func (x *containerServiceDeployInfraServer) Send(m *DeployResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContainerService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).GetLogs(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_ShutdownContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceServer).ShutdownContainer(&containerServiceShutdownContainerServer{stream})
}

type ContainerService_ShutdownContainerServer interface {
	Send(*ShutdownContainerResponse) error
	Recv() (*ShutdownContainerRequest, error)
	grpc.ServerStream
}

type containerServiceShutdownContainerServer struct {
	grpc.ServerStream
}

func (x *containerServiceShutdownContainerServer) Send(m *ShutdownContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containerServiceShutdownContainerServer) Recv() (*ShutdownContainerRequest, error) {
	m := new(ShutdownContainerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContainerService_DelayDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).DelayDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_DelayDeletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).DelayDeletion(ctx, req.(*DelayDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_InitAutoscaling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitAutoscalingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).InitAutoscaling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_InitAutoscaling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).InitAutoscaling(ctx, req.(*InitAutoscalingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_GetNodeIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).GetNodeIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_GetNodeIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).GetNodeIP(ctx, req.(*NodeIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_GetContainerStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceServer).GetContainerStatus(&containerServiceGetContainerStatusServer{stream})
}

type ContainerService_GetContainerStatusServer interface {
	Send(*ContainerStatusResponse) error
	Recv() (*ContainerStatusRequest, error)
	grpc.ServerStream
}

type containerServiceGetContainerStatusServer struct {
	grpc.ServerStream
}

func (x *containerServiceGetContainerStatusServer) Send(m *ContainerStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containerServiceGetContainerStatusServer) Recv() (*ContainerStatusRequest, error) {
	m := new(ContainerStatusRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContainerService_ServiceDesc is the grpc.ServiceDesc for ContainerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fr.centralesupelec.gRPC.containerService",
	HandlerType: (*ContainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getLogs",
			Handler:    _ContainerService_GetLogs_Handler,
		},
		{
			MethodName: "delayDeletion",
			Handler:    _ContainerService_DelayDeletion_Handler,
		},
		{
			MethodName: "initAutoscaling",
			Handler:    _ContainerService_InitAutoscaling_Handler,
		},
		{
			MethodName: "getNodeIP",
			Handler:    _ContainerService_GetNodeIP_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getContainer",
			Handler:       _ContainerService_GetContainer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "saveData",
			Handler:       _ContainerService_SaveData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getAdminContainer",
			Handler:       _ContainerService_GetAdminContainer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "buildDockerImage",
			Handler:       _ContainerService_BuildDockerImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "deployInfra",
			Handler:       _ContainerService_DeployInfra_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "shutdownContainer",
			Handler:       _ContainerService_ShutdownContainer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getContainerStatus",
			Handler:       _ContainerService_GetContainerStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "containerService.proto",
}
